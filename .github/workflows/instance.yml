# Define the name of the GitHub Action workflow
name: Create an EC2 instance

# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      instanceName:
        description: 'Name of the AWS Instance'  # Name of the EC2 instance
        required: true  # This input is required
      awsRegion:
        description: 'AWS Region for the instance'  # AWS region where the instance will be created
        required: true  # This input is required
      instanceType:
        description: 'AWS instance type'  # Type of the EC2 instance (e.g., t2.micro)
        required: true  # This input is required
      action:
        description: 'Action to perform (apply/destroy)'  # Action to be performed (create or delete the instance)
        required: true  # This input is required

# Jobs to be executed in this workflow
jobs:
  # Job for applying the EC2 instance
  apply_ec2:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    # Execute this job only if the action input is "apply"
    if: ${{ github.event.inputs.action == 'apply' }}
    
    # Define the steps for this job
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS credentials. Please store the value of these keys in GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: .  # Assuming your Terraform files are in the root directory

      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: .

      # Validate the Terraform code
      - name: Terraform Validate
        run: terraform validate
        working-directory: .

      # Apply the Terraform plan to create the EC2 instance
      - name: Terraform Apply
        run: terraform apply -var instanceName=${{ github.event.inputs.instanceName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -var instanceType=${{ github.event.inputs.instanceType }} -auto-approve
        working-directory: .

  # Job for destroying the EC2 instance
  destroy_instance:
    runs-on: ubuntu-latest
    
    # Execute this job only if the action input is "destroy"
    if: ${{ github.event.inputs.action == 'destroy' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Configure AWS credentials. Please store the value of these keys in GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}
        
      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: .
      
      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: .
      
      # Destroy the resources managed by Terraform
      - name: Terraform Destroy
        run: terraform destroy -var instanceName=${{ github.event.inputs.instanceName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -var instanceType=${{ github.event.inputs.instanceType }} -auto-approve
        working-directory: .
